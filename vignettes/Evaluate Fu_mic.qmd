---
title: "Compare algorithms to predict Fu"
author: "Susana Proenca"
format: html
editor: visual
project:
  execute-dir: esqIVIVE
---

## Theory

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

Some algorithms are purely empirical regressions

#### Austin et al 2002

$$ 
fu_{inc} = 1 \cdot C \cdot 10^{0.56 \log \left( \frac{P}{D} \right) - 1.41} + 1 
$$

#### Halifax and Houston 2006

$$ 
fu_{inc} = \frac{1}{1+ C \cdot 10^{0.072\cdot \log P ^2 +0.067\cdot\log P-1.126}}
$$

#### Turner

For neutral $$ 
fu_{inc} = \frac{1}{1+ C \cdot 10^{0.46\cdot \log P-1.51}}
$$ For predominantly ionized bases

$$ 
fu_{inc} = \frac{1}{1+ C \cdot 10^{0.58\cdot \log P-2.02}}
$$ For predominantly ionized acid $$ 
fu_{inc} = \frac{1}{1+ C \cdot 10^{0.2\cdot \log P-1.54}}
$$ Poulin

$$ 
fu_{inc} = \frac{1}{Fw+\frac{Pnla\cdot Fnlm}{1+Im}}
$$ Where Fw is the fraction ofwater is the system( very close to 1), Im is the ionization factor, Pnla=neutral lipids partition and Fnlm the fraction of fractional volume of neutral lipids in medium.

For basic chemicals the affintiy to acidic phospholipids is also accounted.Here Papla is the partition to acidic phospholipids and Faplm is the fraction of acidic phospholipids.

$$ 
fu_{inc} = \frac{1}{Fw+\frac{Pnla\cdot Fnlm+Im\cdot Papla\cdot Faplm}{1+Im}}
$$ Pnla is parameterized with logPow at 37 C. Since logKow values are often for 20 Â°C, the authors used a linear regression that corrects for the temperature difference. Papla is parameterized based on a similar regression form Rodgers and Rowland where they use the red blood cells plasma partition coefficient and fraction unbound in plasma.

```{r}
#| label: load functions and data
#| echo: false

#install_local()

library(dplyr)
library(ggpubr)
library(ggplot2)
library(here)
library(devtools)
devtools::load_all()


data_path<-system.file("data","test_fu_microsomes.csv",package="esqIVIVE")
testFuData <-read.csv(data_path)
```

#### Calculate Fu_mic for all

```{r}
#| echo: false

QSARs <- c(
  "All Poulin and Theil",
  "All Berezhkovskiy",
  "All PK-Sim Standard",
  # "Rodgers & Rowland + fu",
  "All Schmitt"
)

for (j in seq(1:length(QSARs))) {
  for (i in seq(1:nrow(testFuData))) {
    testFuData[i, 13 + j] <- FractionUnbound(
      partitionQSPR = QSARs[j], logLipo = as.double(testFuData[i, "LogP37C"]),
      ionization = c(testFuData[i, "Class"], 0),
      typeSystem = "microsomes", FBS_fraction  = 0, microplateType = 96,
      volMedium = 0.22, pKa = c(as.double(testFuData[i, "pKa"]), 0),
      BP = 1, fu = 0.2,
      cMicro_mgml = as.double(testFuData[i, "Cp.mg.mL."]))
  }
}
colnames(testFuData)[seq(14, 17)] <- c(
  "All_Poulin_and_Theil",
  "All_Berezhkovskiy",
  "All_PK_Sim_Standard",
  # "Rodgers_Rowland_fu",
  "All_Schmitt"
)

head(testFuData)
```

Mind that experimental values also have intrinsic variability and Wang et al 2024, it is described how chemicals with lower Fu_microsomes tend to have higher coeficients of variation. Specifically for Verapamil 1 mg/mL microsomes concentration different analytical methods 0.43 with RED device, 0.58 wuth ultrafiltration, 0.41 with HLM-beads, 0.45 with Ultracentrifugation and 0.89 Transil and 0.3 with linear extrapolation stability assay.

```{r}
Verapamil<-testFuData[which(testFuData$Compound=="Verapamil")[4],10:17]

plot(x=rep(1,8),y=as.double(Verapamil),xlim=c(0,3),xlab="Fu_Verapamil")
points(x=rep(2,6),c(0.43,0.58,0.41,0.45,0.89,0.3),col="red")
legend(x=2.5,y=0.3, legend=c("exp","predicted"),col=c("red","black"),pch=19)

```

### Plots

```{r}
Poulin_paper<-ggplot(testFuData, aes(x = Obs_Fumic, y = Fu_Poulin,col = Class)) +
  # geom_point(aes(x=Obs,y=Pred.Poulin))+
  # geom_point(aes(x=Obs,y=All_PK_Sim_Standard))
  geom_smooth(method = "lm", se = FALSE)+
  geom_point()+
  theme_bw()+
  stat_regline_equation(aes(label = ..rr.label..)) 

Halifax_paper<-ggplot(testFuData, aes(x = Obs_Fumic, y = Fu_HalifaxHouston,col = Class)) +
  # geom_point(aes(x=Obs,y=Pred.Poulin))+
  # geom_point(aes(x=Obs,y=All_PK_Sim_Standard))
  geom_smooth(method = "lm", se = FALSE)+
  geom_point()+
  theme_bw()+
  stat_regline_equation(aes(label = ..rr.label..)) 


Turner_paper<-ggplot(testFuData, aes(x = Obs_Fumic, y = Fu_Turner,col = Class)) +
  # geom_point(aes(x=Obs,y=Pred.Poulin))+
  # geom_point(aes(x=Obs,y=All_PK_Sim_Standard))
  geom_smooth(method = "lm", se = FALSE)+
  geom_point()+
  theme_bw()+
  stat_regline_equation(aes(label = ..rr.label..)) 

Austinpaper<-ggplot(testFuData, aes(x = Obs_Fumic, y = Fu_Austin,col = Class)) +
  # geom_point(aes(x=Obs,y=Pred.Poulin))+
  # geom_point(aes(x=Obs,y=All_PK_Sim_Standard))
  geom_smooth(method = "lm", se = FALSE)+
  geom_point()+
  theme_bw()+
  stat_regline_equation(aes(label = ..rr.label..)) 

Poulin_Theil<-ggplot(testFuData, aes(x = Obs_Fumic, y = All_Poulin_and_Theil,col = Class)) +
  # geom_point(aes(x=Obs,y=Pred.Poulin))+
  # geom_point(aes(x=Obs,y=All_PK_Sim_Standard))
  geom_smooth(method = "lm", se = FALSE)+
  geom_point()+
  theme_bw()+
  stat_regline_equation(aes(label = ..rr.label..)) 

Schmitt<-ggplot(testFuData, aes(x = Obs_Fumic, y = All_Schmitt,col = Class)) +
  # geom_point(aes(x=Obs,y=Pred.Poulin))+
  # geom_point(aes(x=Obs,y=All_PK_Sim_Standard))
  geom_smooth(method = "lm", se = FALSE)+
  geom_point()+
  theme_bw()+
  stat_regline_equation(aes(label = ..rr.label..)) 

PKsimstand<-ggplot(testFuData, aes(x = Obs_Fumic, y = All_PK_Sim_Standard,col = Class)) +
  # geom_point(aes(x=Obs,y=Pred.Poulin))+
  # geom_point(aes(x=Obs,y=All_PK_Sim_Standard))
  geom_smooth(method = "lm", se = FALSE)+
  geom_point()+
  theme_bw()+
  stat_regline_equation(aes(label = ..rr.label..)) 

ggarrange(Poulin_paper,Halifax_paper,Turner_paper,Austinpaper,Poulin_Theil,
          Schmitt,PKsimstand,common.legend = TRUE)
```

### Error Table

Calculate how many is within 1.5 % fold , 2 folder, 5 fold, AFE and AAFE.

```{r}
error_table<-data.frame((matrix(ncol = 6, nrow = 7)))
  
#error functions
# % within fold function
percent_within_fold <- function(observed, predicted, fold) {
  mean(predicted >= observed / fold & predicted <= observed * fold) * 100
}

# Average Fold Error (AFE) function
afe <- function(observed, predicted) {
  mean(abs(predicted / observed))
}

aafe <- function(observed, predicted) {
  mean(abs(log10(predicted / observed)))
}

error_table<-list()


for (i in 1:8){
  
 predi<-colnames(testFuData)[9+i]
 error_table[[predi]] <- testFuData %>%
  group_by(Class) %>%
  summarize(
    percent_within_2fold = percent_within_fold(Obs_Fumic, .data[[predi]], 2),
    percent_within_5fold = percent_within_fold(Obs_Fumic, .data[[predi]], 5),
    afe_method= afe(Obs_Fumic, .data[[predi]]),
    aafe_method = aafe(Obs_Fumic, .data[[predi]]),
    .groups = 'drop'
  ) 
  
}
#View(error_table[["Fu_Poulin"]])

  

```

Calculate liver partitioning for all is it more proportional to any specific ..

steps

#import from diana htpbk

#make table to save values row chemicals and col the different partitions

#add parameeters, logP and pKa class as input parameters as loop and get Kliver/water for different partitions coefficents

#Compare the proportion of Fu to Kp ..

```{r}

```
